C51 COMPILER V9.60.7.0   LCD_PBL                                                           04/30/2024 05:56:50 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD_PBL
OBJECT MODULE PLACED IN .\Objects\LCD_PBL.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE LCD_PBL.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\L
                    -CD_PBL.lst) TABS(2) OBJECT(.\Objects\LCD_PBL.obj)

line level    source

   1          #include<reg51.h>
   2          #include<intrins.h>
   3          
   4          void i2c_start(void);
   5          void i2c_stop(void);
   6          void i2c_ACK(void);
   7          void i2c_write(unsigned char);
   8          void i2c_DevWrite(unsigned char);
   9          void lcd_send_cmd(unsigned char);
  10          void lcd_send_data(unsigned char);
  11          void lcd_send_str(unsigned char *);
  12          void lcd_slave(unsigned char );
  13          void delay_ms(unsigned int);
  14          
  15          unsigned char slave1=0x4E;
  16          unsigned char slave_add;
  17          unsigned int count = 0;   // Counter variable
  18          
  19          sbit IR_SENSOR = P1^0;    // IR sensor input pin
  20          sbit BUZZ = P1^1;
  21          
  22          
  23          sbit scl=P2^1;
  24          sbit sda=P2^0;
  25          
  26          void i2c_start(void)
  27          {
  28   1      sda=1;_nop_();_nop_();
  29   1      scl=1;_nop_();_nop_();
  30   1      sda=0;_nop_();_nop_();
  31   1      }
  32          
  33          void i2c_stop(void)
  34          {
  35   1      scl=0;
  36   1      sda=0;
  37   1      scl=1;
  38   1      sda=1;
  39   1      }
  40          
  41          void lcd_slave(unsigned char slave)
  42          {
  43   1      slave_add=slave;
  44   1      }
  45          
  46          void i2c_ACK(void)
  47          {
  48   1      scl=0;
  49   1      sda=1;
  50   1      scl=1;
  51   1      while(sda);
  52   1      }
  53          
  54          void i2c_write(unsigned char dat)
C51 COMPILER V9.60.7.0   LCD_PBL                                                           04/30/2024 05:56:50 PAGE 2   

  55          {
  56   1      unsigned char i;
  57   1      for(i=0;i<8;i++)
  58   1      {
  59   2      scl=0;
  60   2      sda=(dat&(0x80)>>i)?1:0;
  61   2      scl=1;
  62   2      }
  63   1      }
  64          
  65          void lcd_send_cmd(unsigned char cmd)
  66          {
  67   1      unsigned char cmd_l,cmd_u;
  68   1      cmd_l=(cmd<<4)&0xf0;
  69   1      cmd_u=(cmd &0xf0);
  70   1      i2c_start();       //BL EN RW RS 1 1 0 0
  71   1      i2c_write(slave_add);
  72   1      i2c_ACK();
  73   1      i2c_write(cmd_u|0x0C);
  74   1      i2c_ACK();
  75   1      delay_ms(1);
  76   1      i2c_write(cmd_u|0x08); // 1 0 0 0
  77   1      i2c_ACK();
  78   1      delay_ms(10);
  79   1      i2c_write(cmd_l|0x0C);   // 1 1 0 0
  80   1      i2c_ACK();
  81   1      delay_ms(1);
  82   1      i2c_write(cmd_l|0x08);
  83   1      i2c_ACK();
  84   1      delay_ms(10);
  85   1      i2c_stop();
  86   1      }
  87          
  88          void lcd_send_data(unsigned char dataw)// 1 1 0 1
  89          {
  90   1      unsigned char dataw_l,dataw_u;
  91   1      dataw_l=(dataw<<4)&0xf0;
  92   1      dataw_u=(dataw &0xf0);
  93   1      i2c_start();
  94   1      i2c_write(slave_add);
  95   1      i2c_ACK();
  96   1      i2c_write(dataw_u|0x0D);//BL EN RW RS   1 1 0 1
  97   1      i2c_ACK();
  98   1      delay_ms(1);
  99   1      i2c_write(dataw_u|0x09);// 1 0 0 1
 100   1      i2c_ACK();
 101   1      delay_ms(10);
 102   1      i2c_write(dataw_l|0x0D);
 103   1      i2c_ACK();
 104   1      delay_ms(1);
 105   1      i2c_write(dataw_l|0x09);
 106   1      i2c_ACK();
 107   1      delay_ms(10);
 108   1      i2c_stop();
 109   1      }
 110          
 111          void lcd_send_str(unsigned char *p)
 112          {
 113   1      while(*p != '\0')
 114   1      lcd_send_data(*p++);
 115   1      }
 116          
C51 COMPILER V9.60.7.0   LCD_PBL                                                           04/30/2024 05:56:50 PAGE 3   

 117          
 118          void delay_ms(unsigned int n)
 119          {
 120   1      unsigned int m;
 121   1      for(n;n>0;n--)
 122   1      {
 123   2        for(m=121;m>0;m--);
 124   2          _nop_();
 125   2        _nop_();
 126   2        _nop_();
 127   2        _nop_();
 128   2        _nop_();
 129   2        _nop_();
 130   2      }
 131   1      }
 132          
 133          void lcd_init()
 134          {
 135   1      lcd_send_cmd(0x02); // Return home
 136   1      lcd_send_cmd(0x28); // 4 bit mode
 137   1      lcd_send_cmd(0x0C); // Display On , cursor off
 138   1      lcd_send_cmd(0x06); // Increment Cursor (shift cursor to right)
 139   1      lcd_send_cmd(0x01); // clear display
 140   1      }
 141          void update_counter() {
 142   1          count++;  // Increment count
 143   1          lcd_send_cmd(0xC8);  // Set cursor to the position to display the count
 144   1          lcd_send_data((count / 100) + '0');  // Display hundreds digit
 145   1          lcd_send_data(((count / 10) % 10) + '0');  // Display tens digit
 146   1          lcd_send_data((count % 10) + '0');  // Display units digit
 147   1      }
 148          
 149          
 150          void main(void)
 151          {
 152   1      lcd_slave(slave1);
 153   1      lcd_init();
 154   1      lcd_send_cmd(0x80);
 155   1      lcd_send_str("Object Counter");
 156   1      lcd_send_cmd(0xC0);
 157   1      lcd_send_str("Count : 000");
 158   1      
 159   1      BUZZ=0;
 160   1         while (1) {            // Infinite loop
 161   2              if (IR_SENSOR == 0) {
 162   3                  delay_ms(50);
 163   3      
 164   3                  while (IR_SENSOR == 0){
 165   4                    BUZZ=1;// Check if IR sensor detects an object
 166   4                    };  // Wait until the object is removed to avoid counting multiple times
 167   3                  update_counter();
 168   3                  BUZZ=0;// Update the counter and display it on the LCD
 169   3              }
 170   2          }
 171   1      }
 172          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    464    ----
   CONSTANT SIZE    =     27    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   LCD_PBL                                                           04/30/2024 05:56:50 PAGE 4   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
